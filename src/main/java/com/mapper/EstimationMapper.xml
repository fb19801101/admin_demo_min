<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.EstimationMapper">
  <resultMap id="BaseResultMap" type="com.model.Estimation">
    <id column="en_id" jdbcType="INTEGER" property="enId" />
    <result column="ct_id" jdbcType="INTEGER" property="ctId" />
    <result column="gd_id" jdbcType="INTEGER" property="gdId" />
    <result column="cl_id" jdbcType="INTEGER" property="clId" />
    <result column="ct_code" jdbcType="CHAR" property="ctCode" />
    <result column="gd_code" jdbcType="CHAR" property="gdCode" />
    <result column="cl_code" jdbcType="CHAR" property="clCode" />
    <result column="en_code" jdbcType="CHAR" property="enCode" />
    <result column="en_name" jdbcType="VARCHAR" property="enName" />
    <result column="en_unit" jdbcType="VARCHAR" property="enUnit" />
    <result column="en_qty_labour" jdbcType="DOUBLE" property="enQtyLabour" />
    <result column="en_price_labour" jdbcType="DOUBLE" property="enPriceLabour" />
    <result column="en_money_labour" jdbcType="DOUBLE" property="enMoneyLabour" />
    <result column="en_factor" jdbcType="DOUBLE" property="enFactor" />
    <result column="en_qty_material" jdbcType="DOUBLE" property="enQtyMaterial" />
    <result column="en_price_material" jdbcType="DOUBLE" property="enPriceMaterial" />
    <result column="en_money_material" jdbcType="DOUBLE" property="enMoneyMaterial" />
    <result column="en_info" jdbcType="VARCHAR" property="enInfo" />
  </resultMap>
  <resultMap id="BaseResultMapExtends" type="com.model.Estimation" extends="BaseResultMap">
  <association property="contract" javaType="com.model.Contract"
             select="com.mapper.ContractMapper.selectByPrimaryKey" column="ct_id">
  </association>
  <association property="guidance" javaType="com.model.Guidance"
             select="com.mapper.GuidanceMapper.selectByPrimaryKey" column="gd_id">
  </association>
  <association property="costLayer" javaType="com.model.CostLayer"
             select="com.mapper.CostLayerMapper.selectByPrimaryKey" column="cl_id">
  </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Where_Clause">
    <where>
      <if test="record.enId != null">
        en_id = #{record.enId,jdbcType=INTEGER}
      </if>
      <if test="record.ctId != null">
        and ct_id = #{record.ctId,jdbcType=INTEGER}
      </if>
      <if test="record.ctCode != null">
        and ct_code = #{record.ctCode,jdbcType=CHAR}
      </if>
      <if test="record.gdId != null">
        and gd_id = #{record.gdId,jdbcType=INTEGER}
      </if>
      <if test="record.gdCode != null">
        and gd_code = #{record.gdCode,jdbcType=CHAR}
      </if>
      <if test="record.clId != null">
        and cl_id = #{record.clId,jdbcType=INTEGER}
      </if>
      <if test="record.clCode != null">
        and cl_code = #{record.clCode,jdbcType=CHAR}
      </if>
      <if test="record.enCode != null">
        and en_code = #{record.enCode,jdbcType=CHAR}
      </if>
      <if test="record.enName != null">
        and en_name = #{record.enName,jdbcType=VARCHAR}
      </if>
      <if test="record.enUnit != null">
        and en_unit = #{record.enUnit,jdbcType=VARCHAR}
      </if>
      <if test="record.enQtyLabour != null">
        and en_qty_labour = #{record.enQtyLabour,jdbcType=DOUBLE}
      </if>
      <if test="record.enPriceLabour != null">
        and en_price_labour = #{record.enPriceLabour,jdbcType=DOUBLE}
      </if>
      <if test="record.enMoneyLabour != null">
        and en_money_labour = #{record.enMoneyLabour,jdbcType=DOUBLE}
      </if>
      <if test="record.enFactor != null">
        and en_factor = #{record.enFactor,jdbcType=DOUBLE}
      </if>
      <if test="record.enQtyMaterial != null">
        and en_qty_material = #{record.enQtyMaterial,jdbcType=DOUBLE}
      </if>
      <if test="record.enPriceMaterial != null">
        and en_price_material = #{record.enPriceMaterial,jdbcType=DOUBLE}
      </if>
      <if test="record.enMoneyMaterial != null">
        and en_money_material = #{record.enMoneyMaterial,jdbcType=DOUBLE}
      </if>
      <if test="record.enInfo != null">
        and en_info = #{record.enInfo,jdbcType=VARCHAR}
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
</sql>
  <sql id="Model_Query_Clause">
    <where>
      <if test="record.enId != null">
        en_id like concat('%', #{record.enId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.enCode != null">
        and en_code like concat('%', #{record.enCode,jdbcType=CHAR}, '%')
      </if>
      <if test="record.ctId != null">
        ct_id like concat('%', #{record.ctId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.ctCode != null">
        and ct_code like concat('%', #{record.ctCode,jdbcType=CHAR}, '%')
      </if>
      <if test="record.gdId != null">
        gd_id like concat('%', #{record.gdId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.gdCode != null">
        and gd_code like concat('%', #{record.gdCode,jdbcType=CHAR}, '%')
      </if>
      <if test="record.clId != null">
        cl_id like concat('%', #{record.clId,jdbcType=INTEGER}, '%')
      </if>
      <if test="record.clCode != null">
        and cl_code like concat('%', #{record.clCode,jdbcType=CHAR}, '%')
      </if>
      <if test="record.enName != null">
        and en_name like concat('%', #{record.enName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.enUnit != null">
        and en_unit like concat('%', #{record.enUnit,jdbcType=VARCHAR}, '%')
      </if>
      <if test="record.enQtyLabour != null">
        and en_qty_labour like concat('%', #{record.enQtyLabour,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enPriceLabour != null">
        and en_price_labour like concat('%', #{record.enPriceLabour,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enMoneyLabour != null">
        and en_money_labour like concat('%', #{record.enMoneyLabour,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enFactor != null">
        and en_factor like concat('%', #{record.enFactor,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enQtyMaterial != null">
        and en_qty_material like concat('%', #{record.enQtyMaterial,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enPriceMaterial != null">
        and en_price_material like concat('%', #{record.enPriceMaterial,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enMoneyMaterial != null">
        and en_money_material like concat('%', #{record.enMoneyMaterial,jdbcType=DOUBLE}, '%')
      </if>
      <if test="record.enInfo != null">
        and en_info like concat('%', #{record.enInfo,jdbcType=VARCHAR}, '%')
      </if>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <sql id="Model_Clause_Offset">
    <if test="_parameter != null and _parameter.containsKey('limit') and limit != null">
      <choose>
        <when test="_parameter.containsKey('offset') and offset != null">
          order by en_id asc limit #{offset}, #{limit};
        </when>
        <otherwise>
          order by en_id asc limit  #{limit};
        </otherwise>
      </choose>
    </if>
  </sql>
  <sql id="Base_Column_List">
    en_id, ct_id, gd_id, cl_id, ct_code, gd_code, cl_code, en_code, en_name, en_unit, 
    en_qty_labour, en_price_labour, en_money_labour, en_factor, en_qty_material, en_price_material, 
    en_money_material, en_info
  </sql>
  <sql id="Param_Column_List">
    <choose>
    <when test="_parameter.containsKey('fields') and fields != null">
      ${fields}
    </when>
    <otherwise>
      <include refid="Base_Column_List" />
    </otherwise>
  </choose>
  </sql>
  <sql id="Param_Where_Clause_Like">
    <if test="_parameter != null and _parameter.containsKey('field') and field != null">
      <where>
        <if test="_parameter.containsKey('value') and value != null">
          ${field} like concat('%', #{value}, '%')
        </if>
      </where>
      <if test="_parameter.containsKey('limit') and limit != null">
        <choose>
          <when test="_parameter.containsKey('offset') and offset != null">
            order by ${field} asc limit #{offset}, #{limit};
          </when>
          <otherwise>
            order by ${field} asc limit  #{limit};
          </otherwise>
        </choose>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Equal">
    <if test="_parameter != null and _parameter.containsKey('field') and field != null">
      <where>
        <if test="_parameter.containsKey('value') and value != null">
          ${field} = #{value}
        </if>
        <if test="_parameter.containsKey('value1') and _parameter.containsKey('value2')">
          <if test="value1 != null and value2 != null">
            ${field} between #{value1} and #{value2}
          </if>
        </if>
      </where>
      <if test="_parameter.containsKey('limit') and limit != null">
        <choose>
          <when test="_parameter.containsKey('offset') and offset != null">
            order by ${field} asc limit #{offset}, #{limit};
          </when>
          <otherwise>
            order by ${field} asc limit  #{limit};
          </otherwise>
        </choose>
      </if>
    </if>
  </sql>
  <sql id="Param_Where_Clause_Sql">
    <where>
      <choose>
        <when test="_parameter != null and _parameter.containsKey('sql') and sql != null">
          ${sql}
        </when>
        <otherwise>
          en_id is null
        </otherwise>
      </choose>
    </where>
    <include refid="Model_Clause_Offset" />
  </sql>
  <select id="selectByExample" parameterType="com.model.EstimationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_estimation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMapExtends">
    select 
    <include refid="Base_Column_List" />
    from tb_estimation
    where en_id = #{enId,jdbcType=INTEGER}
  </select>
  <select id="selectByMinPrimaryKey" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    where en_id = (select min(en_id) from tb_estimation)
  </select>
  <select id="selectByMaxPrimaryKey" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    where en_id = (select max(en_id) from tb_estimation)
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_estimation
    where en_id = #{enId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.model.EstimationExample">
    delete from tb_estimation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="en_id" keyProperty="enId" parameterType="com.model.Estimation" useGeneratedKeys="true">
    insert into tb_estimation (en_id, ct_id, gd_id, cl_id,
      ct_code, gd_code, cl_code, en_code, 
      en_name, en_unit, en_qty_labour, 
      en_price_labour, en_money_labour, en_factor, 
      en_qty_material, en_price_material, en_money_material, 
      en_info)
    values (#{enId,jdbcType=INTEGER}, #{ctId,jdbcType=INTEGER}, #{gdId,jdbcType=INTEGER}, #{clId,jdbcType=INTEGER},
      #{ctCode,jdbcType=CHAR}, #{gdCode,jdbcType=CHAR}, #{clCode,jdbcType=CHAR}, #{enCode,jdbcType=CHAR}, 
      #{enName,jdbcType=VARCHAR}, #{enUnit,jdbcType=VARCHAR}, #{enQtyLabour,jdbcType=DOUBLE}, 
      #{enPriceLabour,jdbcType=DOUBLE}, #{enMoneyLabour,jdbcType=DOUBLE}, #{enFactor,jdbcType=DOUBLE}, 
      #{enQtyMaterial,jdbcType=DOUBLE}, #{enPriceMaterial,jdbcType=DOUBLE}, #{enMoneyMaterial,jdbcType=DOUBLE}, 
      #{enInfo,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="en_id" keyProperty="enId" parameterType="com.model.Estimation" useGeneratedKeys="true">
    insert into tb_estimation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="enId != null">
        en_id,
      </if>
      <if test="ctId != null">
        ct_id,
      </if>
      <if test="gdId != null">
        gd_id,
      </if>
      <if test="clId != null">
        cl_id,
      </if>
      <if test="ctCode != null">
        ct_code,
      </if>
      <if test="gdCode != null">
        gd_code,
      </if>
      <if test="clCode != null">
        cl_code,
      </if>
      <if test="enCode != null">
        en_code,
      </if>
      <if test="enName != null">
        en_name,
      </if>
      <if test="enUnit != null">
        en_unit,
      </if>
      <if test="enQtyLabour != null">
        en_qty_labour,
      </if>
      <if test="enPriceLabour != null">
        en_price_labour,
      </if>
      <if test="enMoneyLabour != null">
        en_money_labour,
      </if>
      <if test="enFactor != null">
        en_factor,
      </if>
      <if test="enQtyMaterial != null">
        en_qty_material,
      </if>
      <if test="enPriceMaterial != null">
        en_price_material,
      </if>
      <if test="enMoneyMaterial != null">
        en_money_material,
      </if>
      <if test="enInfo != null">
        en_info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="enId != null">
        #{enId,jdbcType=INTEGER},
      </if>
      <if test="ctId != null">
        #{ctId,jdbcType=INTEGER},
      </if>
      <if test="gdId != null">
        #{gdId,jdbcType=INTEGER},
      </if>
      <if test="clId != null">
        #{clId,jdbcType=INTEGER},
      </if>
      <if test="ctCode != null">
        #{ctCode,jdbcType=CHAR},
      </if>
      <if test="gdCode != null">
        #{gdCode,jdbcType=CHAR},
      </if>
      <if test="clCode != null">
        #{clCode,jdbcType=CHAR},
      </if>
      <if test="enCode != null">
        #{enCode,jdbcType=CHAR},
      </if>
      <if test="enName != null">
        #{enName,jdbcType=VARCHAR},
      </if>
      <if test="enUnit != null">
        #{enUnit,jdbcType=VARCHAR},
      </if>
      <if test="enQtyLabour != null">
        #{enQtyLabour,jdbcType=DOUBLE},
      </if>
      <if test="enPriceLabour != null">
        #{enPriceLabour,jdbcType=DOUBLE},
      </if>
      <if test="enMoneyLabour != null">
        #{enMoneyLabour,jdbcType=DOUBLE},
      </if>
      <if test="enFactor != null">
        #{enFactor,jdbcType=DOUBLE},
      </if>
      <if test="enQtyMaterial != null">
        #{enQtyMaterial,jdbcType=DOUBLE},
      </if>
      <if test="enPriceMaterial != null">
        #{enPriceMaterial,jdbcType=DOUBLE},
      </if>
      <if test="enMoneyMaterial != null">
        #{enMoneyMaterial,jdbcType=DOUBLE},
      </if>
      <if test="enInfo != null">
        #{enInfo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.model.EstimationExample" resultType="java.lang.Long">
    select count(*) from tb_estimation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByModel" parameterType="com.model.Guidance" resultType="java.lang.Long">
    select count(*) from tb_estimation
    <if test="_parameter != null">
      <include refid="Model_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_estimation
    <set>
      <if test="record.enId != null">
        en_id = #{record.enId,jdbcType=INTEGER},
      </if>
      <if test="record.ctId != null">
        ct_id = #{record.ctId,jdbcType=INTEGER},
      </if>
      <if test="record.gdId != null">
        gd_id = #{record.gdId,jdbcType=INTEGER},
      </if>
      <if test="record.clId != null">
        cl_id = #{record.clId,jdbcType=INTEGER},
      </if>
      <if test="record.ctCode != null">
        ct_code = #{record.ctCode,jdbcType=CHAR},
      </if>
      <if test="record.gdCode != null">
        gd_code = #{record.gdCode,jdbcType=CHAR},
      </if>
      <if test="record.clCode != null">
        cl_code = #{record.clCode,jdbcType=CHAR},
      </if>
      <if test="record.enCode != null">
        en_code = #{record.enCode,jdbcType=CHAR},
      </if>
      <if test="record.enName != null">
        en_name = #{record.enName,jdbcType=VARCHAR},
      </if>
      <if test="record.enUnit != null">
        en_unit = #{record.enUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.enQtyLabour != null">
        en_qty_labour = #{record.enQtyLabour,jdbcType=DOUBLE},
      </if>
      <if test="record.enPriceLabour != null">
        en_price_labour = #{record.enPriceLabour,jdbcType=DOUBLE},
      </if>
      <if test="record.enMoneyLabour != null">
        en_money_labour = #{record.enMoneyLabour,jdbcType=DOUBLE},
      </if>
      <if test="record.enFactor != null">
        en_factor = #{record.enFactor,jdbcType=DOUBLE},
      </if>
      <if test="record.enQtyMaterial != null">
        en_qty_material = #{record.enQtyMaterial,jdbcType=DOUBLE},
      </if>
      <if test="record.enPriceMaterial != null">
        en_price_material = #{record.enPriceMaterial,jdbcType=DOUBLE},
      </if>
      <if test="record.enMoneyMaterial != null">
        en_money_material = #{record.enMoneyMaterial,jdbcType=DOUBLE},
      </if>
      <if test="record.enInfo != null">
        en_info = #{record.enInfo,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_estimation
    set en_id = #{record.enId,jdbcType=INTEGER},
      ct_id = #{record.ctId,jdbcType=INTEGER},
      gd_id = #{record.gdId,jdbcType=INTEGER},
      cl_id = #{record.clId,jdbcType=INTEGER},
      ct_code = #{record.ctCode,jdbcType=CHAR},
      gd_code = #{record.gdCode,jdbcType=CHAR},
      cl_code = #{record.clCode,jdbcType=CHAR},
      en_code = #{record.enCode,jdbcType=CHAR},
      en_name = #{record.enName,jdbcType=VARCHAR},
      en_unit = #{record.enUnit,jdbcType=VARCHAR},
      en_qty_labour = #{record.enQtyLabour,jdbcType=DOUBLE},
      en_price_labour = #{record.enPriceLabour,jdbcType=DOUBLE},
      en_money_labour = #{record.enMoneyLabour,jdbcType=DOUBLE},
      en_factor = #{record.enFactor,jdbcType=DOUBLE},
      en_qty_material = #{record.enQtyMaterial,jdbcType=DOUBLE},
      en_price_material = #{record.enPriceMaterial,jdbcType=DOUBLE},
      en_money_material = #{record.enMoneyMaterial,jdbcType=DOUBLE},
      en_info = #{record.enInfo,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.Estimation">
    update tb_estimation
    <set>
      <if test="ctId != null">
        ct_id = #{ctId,jdbcType=INTEGER},
      </if>
      <if test="gdId != null">
        gd_id = #{gdId,jdbcType=INTEGER},
      </if>
      <if test="clId != null">
        cl_id = #{clId,jdbcType=INTEGER},
      </if>
      <if test="ctCode != null">
        ct_code = #{ctCode,jdbcType=CHAR},
      </if>
      <if test="gdCode != null">
        gd_code = #{gdCode,jdbcType=CHAR},
      </if>
      <if test="clCode != null">
        cl_code = #{clCode,jdbcType=CHAR},
      </if>
      <if test="enCode != null">
        en_code = #{enCode,jdbcType=CHAR},
      </if>
      <if test="enName != null">
        en_name = #{enName,jdbcType=VARCHAR},
      </if>
      <if test="enUnit != null">
        en_unit = #{enUnit,jdbcType=VARCHAR},
      </if>
      <if test="enQtyLabour != null">
        en_qty_labour = #{enQtyLabour,jdbcType=DOUBLE},
      </if>
      <if test="enPriceLabour != null">
        en_price_labour = #{enPriceLabour,jdbcType=DOUBLE},
      </if>
      <if test="enMoneyLabour != null">
        en_money_labour = #{enMoneyLabour,jdbcType=DOUBLE},
      </if>
      <if test="enFactor != null">
        en_factor = #{enFactor,jdbcType=DOUBLE},
      </if>
      <if test="enQtyMaterial != null">
        en_qty_material = #{enQtyMaterial,jdbcType=DOUBLE},
      </if>
      <if test="enPriceMaterial != null">
        en_price_material = #{enPriceMaterial,jdbcType=DOUBLE},
      </if>
      <if test="enMoneyMaterial != null">
        en_money_material = #{enMoneyMaterial,jdbcType=DOUBLE},
      </if>
      <if test="enInfo != null">
        en_info = #{enInfo,jdbcType=VARCHAR},
      </if>
    </set>
    where en_id = #{enId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.model.Estimation">
    update tb_estimation
    set ct_id = #{ctId,jdbcType=INTEGER},
      gd_id = #{gdId,jdbcType=INTEGER},
      cl_id = #{clId,jdbcType=INTEGER},
      ct_code = #{ctCode,jdbcType=CHAR},
      gd_code = #{gdCode,jdbcType=CHAR},
      cl_code = #{clCode,jdbcType=CHAR},
      en_code = #{enCode,jdbcType=CHAR},
      en_name = #{enName,jdbcType=VARCHAR},
      en_unit = #{enUnit,jdbcType=VARCHAR},
      en_qty_labour = #{enQtyLabour,jdbcType=DOUBLE},
      en_price_labour = #{enPriceLabour,jdbcType=DOUBLE},
      en_money_labour = #{enMoneyLabour,jdbcType=DOUBLE},
      en_factor = #{enFactor,jdbcType=DOUBLE},
      en_qty_material = #{enQtyMaterial,jdbcType=DOUBLE},
      en_price_material = #{enPriceMaterial,jdbcType=DOUBLE},
      en_money_material = #{enMoneyMaterial,jdbcType=DOUBLE},
      en_info = #{enInfo,jdbcType=VARCHAR}
    where en_id = #{enId,jdbcType=INTEGER}
  </update>
  <select id="selectAllModel" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    <include refid="Model_Clause_Offset" />
  </select>
  <select id="countAllModel" resultType="java.lang.Long">
    select count(*) from tb_estimation
  </select>
  <select id="selectByParam" parameterType="map" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    <include refid="Model_Where_Clause" />
  </select>
  <select id="countBySelectParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from tb_estimation
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryByParam" parameterType="map" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    <include refid="Model_Query_Clause" />
  </select>
  <select id="countByQueryParam" parameterType="map" resultType="java.lang.Long">
    select count(*) from tb_estimation
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectByCondition" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="countBySelectCondition" resultType="java.lang.Long">
    select count(*) from tb_estimation
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryByCondition" resultMap="BaseResultMapExtends">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="countByQueryCondition" resultType="java.lang.Long">
    select count(*) from tb_estimation
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_estimation
    <include refid="Model_Where_Clause" />
  </select>
  <select id="queryFieldsByParam" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_estimation
    <include refid="Model_Query_Clause" />
  </select>
  <select id="selectFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_estimation
    <include refid="Param_Where_Clause_Equal" />
  </select>
  <select id="queryFieldsByCondition" resultMap="BaseResultMap">
    select
    <include refid="Param_Column_List" />
    from tb_estimation
    <include refid="Param_Where_Clause_Like" />
  </select>
  <select id="selectBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Base_Column_List" />
    from tb_estimation
    <include refid="Param_Where_Clause_Sql" />
  </select>
  <select id="selectFieldsBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select
    <include refid="Param_Column_List" />
    from tb_estimation
    <include refid="Param_Where_Clause_Sql" />
  </select>
</mapper>